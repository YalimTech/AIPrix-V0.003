import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from "react";
import { HomeIcon, PhoneIcon, ClockIcon, CurrencyDollarIcon, ExclamationTriangleIcon, CalendarDaysIcon, ArrowPathIcon, ChartBarIcon, } from "@heroicons/react/24/outline";
import { useAnalytics, useAgents, usePhoneNumbers } from "../hooks/useAnalytics";
const Analytics = () => {
    const [selectedAgent, setSelectedAgent] = useState("");
    const [selectedCallType, setSelectedCallType] = useState("");
    const [fromDate, setFromDate] = useState("");
    const [toDate, setToDate] = useState("");
    const [selectedType, setSelectedType] = useState("Number");
    const [isTypeDropdownOpen, setIsTypeDropdownOpen] = useState(false);
    const [callOutcomeFrom, setCallOutcomeFrom] = useState("08/31/2025");
    const [callOutcomeTo, setCallOutcomeTo] = useState("09/30/2025");
    const [callOutcomeDay, setCallOutcomeDay] = useState("Day");
    // Construir filtros para la API
    const filters = {
        agentId: selectedAgent || undefined,
        callType: selectedCallType || undefined,
        dateFrom: fromDate || undefined,
        dateTo: toDate || undefined,
        phoneNumber: selectedType || undefined,
    };
    // Obtener datos de analytics
    const { data: analyticsData, isLoading: analyticsLoading, error: analyticsError } = useAnalytics(filters);
    const analytics = analyticsData;
    // Obtener datos para los filtros
    const { data: agentsData } = useAgents();
    const { data: phoneNumbersData } = usePhoneNumbers();
    // Actualizar filtros cuando cambien los datos
    useEffect(() => {
        if (fromDate && toDate) {
            setCallOutcomeFrom(fromDate);
            setCallOutcomeTo(toDate);
        }
    }, [fromDate, toDate]);
    return (_jsxs("div", { className: "space-y-6", children: [_jsx("nav", { className: "flex", "aria-label": "Breadcrumb", children: _jsxs("ol", { className: "inline-flex items-center space-x-1 md:space-x-3", children: [_jsx("li", { className: "inline-flex items-center", children: _jsxs("a", { href: "#", className: "text-gray-700 hover:text-blue-600", children: [_jsx(HomeIcon, { className: "w-4 h-4 mr-2" }), "Dashboard"] }) }), _jsx("li", { children: _jsxs("div", { className: "flex items-center", children: [_jsx("svg", { className: "w-6 h-6 text-gray-400", fill: "currentColor", viewBox: "0 0 20 20", children: _jsx("path", { fillRule: "evenodd", d: "M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z", clipRule: "evenodd" }) }), _jsx("span", { className: "ml-1 text-gray-500 md:ml-2", children: "Analytics" })] }) })] }) }), _jsx("div", { children: _jsx("h1", { className: "text-2xl font-bold text-gray-900", children: "Analytics" }) }), _jsxs("div", { className: "bg-white p-4 rounded-lg border border-gray-200", children: [_jsxs("div", { className: "flex items-center justify-between mb-3", children: [_jsx("h3", { className: "text-sm font-medium text-gray-700", children: "Filters" }), _jsx("button", { onClick: () => {
                                    setSelectedAgent("");
                                    setSelectedCallType("");
                                    setFromDate("");
                                    setToDate("");
                                    setSelectedType("");
                                }, className: "text-xs text-blue-600 hover:text-blue-800 underline", children: "Limpiar filtros" })] }), _jsxs("div", { className: "flex flex-wrap gap-4", children: [_jsxs("div", { className: "flex-1 min-w-48", children: [_jsx("label", { className: "block text-xs font-medium text-gray-700 mb-1", children: "Agent" }), _jsxs("select", { value: selectedAgent, onChange: (e) => setSelectedAgent(e.target.value), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm", children: [_jsx("option", { value: "", children: "Todos los Agentes" }), agentsData?.map((agent) => (_jsx("option", { value: agent.id, children: agent.name }, agent.id)))] })] }), _jsxs("div", { className: "flex-1 min-w-48", children: [_jsx("label", { className: "block text-xs font-medium text-gray-700 mb-1", children: "Call Type" }), _jsxs("select", { value: selectedCallType, onChange: (e) => setSelectedCallType(e.target.value), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm", children: [_jsx("option", { value: "", children: "Call Type" }), _jsx("option", { value: "inbound", children: "Inbound" }), _jsx("option", { value: "outbound", children: "Outbound" })] })] }), _jsxs("div", { className: "flex-1 min-w-48", children: [_jsx("label", { className: "block text-xs font-medium text-gray-700 mb-1", children: "From" }), _jsxs("div", { className: "relative", children: [_jsx("input", { type: "date", value: fromDate, onChange: (e) => setFromDate(e.target.value), className: "w-full px-3 py-2 pl-8 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm" }), _jsx(CalendarDaysIcon, { className: "absolute left-2 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" })] })] }), _jsxs("div", { className: "flex-1 min-w-48", children: [_jsx("label", { className: "block text-xs font-medium text-gray-700 mb-1", children: "To" }), _jsxs("div", { className: "relative", children: [_jsx("input", { type: "date", value: toDate, onChange: (e) => setToDate(e.target.value), className: "w-full px-3 py-2 pl-8 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm" }), _jsx(CalendarDaysIcon, { className: "absolute left-2 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" })] })] }), _jsxs("div", { className: "flex-1 min-w-48", children: [_jsx("label", { className: "block text-xs font-medium text-gray-700 mb-1", children: "Type" }), _jsxs("div", { className: "relative", children: [_jsxs("button", { type: "button", onClick: () => setIsTypeDropdownOpen(!isTypeDropdownOpen), className: "w-full px-3 py-2 text-left border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white flex items-center justify-between text-sm", children: [_jsx("span", { children: selectedType }), _jsx("svg", { className: `w-4 h-4 text-gray-400 transition-transform ${isTypeDropdownOpen ? "rotate-180" : ""}`, fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: _jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M19 9l-7 7-7-7" }) })] }), isTypeDropdownOpen && (_jsxs("div", { className: "absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg", children: [_jsx("button", { type: "button", onClick: () => {
                                                            setSelectedType("Number");
                                                            setIsTypeDropdownOpen(false);
                                                        }, className: `w-full px-3 py-2 text-left hover:bg-blue-50 text-sm ${selectedType === "Number"
                                                            ? "bg-blue-100 text-blue-700"
                                                            : "text-gray-900"}`, children: "Number" }), _jsx("button", { type: "button", onClick: () => {
                                                            setSelectedType("Percentage");
                                                            setIsTypeDropdownOpen(false);
                                                        }, className: `w-full px-3 py-2 text-left hover:bg-blue-50 text-sm ${selectedType === "Percentage"
                                                            ? "bg-blue-100 text-blue-700"
                                                            : "text-gray-900"}`, children: "Percentage" })] }))] })] }), _jsxs("div", { className: "flex-1 min-w-48", children: [_jsx("label", { className: "block text-xs font-medium text-gray-700 mb-1", children: "Number" }), _jsxs("select", { value: selectedType, onChange: (e) => setSelectedType(e.target.value), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm", children: [_jsx("option", { value: "", children: "Todos los N\u00FAmeros" }), phoneNumbersData?.map((number) => (_jsxs("option", { value: number.number, children: [number.number, " (", number.friendlyName || 'Sin nombre', ")"] }, number.id)))] })] })] }), (selectedAgent || selectedCallType || fromDate || toDate || selectedType) && (_jsx("div", { className: "mt-3 p-2 bg-blue-50 border border-blue-200 rounded-md", children: _jsxs("p", { className: "text-xs text-blue-700", children: ["Filtros activos:", selectedAgent && ` Agente: ${agentsData?.find((a) => a.id === selectedAgent)?.name || selectedAgent}`, selectedCallType && ` Tipo: ${selectedCallType}`, fromDate && ` Desde: ${fromDate}`, toDate && ` Hasta: ${toDate}`, selectedType && ` NÃºmero: ${selectedType}`] }) }))] }), analyticsLoading ? (_jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4", children: [...Array(8)].map((_, index) => (_jsx("div", { className: "bg-white p-4 rounded-lg border border-gray-200 animate-pulse", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("div", { className: "h-8 bg-gray-200 rounded w-16 mb-2" }), _jsx("div", { className: "h-4 bg-gray-200 rounded w-20" })] }), _jsx("div", { className: "w-8 h-8 bg-gray-200 rounded" })] }) }, index))) })) : analyticsError ? (_jsx("div", { className: "bg-red-50 border border-red-200 rounded-lg p-4", children: _jsxs("p", { className: "text-red-600", children: ["Error cargando datos de analytics: ", analyticsError.message] }) })) : (_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4", children: [_jsx("div", { className: "bg-white p-4 rounded-lg border border-gray-200", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-2xl font-bold text-gray-900", children: analytics?.calls || 0 }), _jsx("p", { className: "text-sm text-gray-600", children: "Calls" })] }), _jsx(PhoneIcon, { className: "w-8 h-8 text-blue-600" })] }) }), _jsx("div", { className: "bg-white p-4 rounded-lg border border-gray-200", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-2xl font-bold text-gray-900", children: analytics?.minutes?.toFixed(1) || 0 }), _jsx("p", { className: "text-sm text-gray-600", children: "Minutes" })] }), _jsx(ClockIcon, { className: "w-8 h-8 text-blue-600" })] }) }), _jsx("div", { className: "bg-white p-4 rounded-lg border border-gray-200", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsxs("p", { className: "text-2xl font-bold text-gray-900", children: ["$", analytics?.spent?.toFixed(2) || '0.00'] }), _jsx("p", { className: "text-sm text-gray-600", children: "Spent" })] }), _jsx(CurrencyDollarIcon, { className: "w-8 h-8 text-blue-600" })] }) }), _jsx("div", { className: "bg-white p-4 rounded-lg border border-gray-200", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-2xl font-bold text-gray-900", children: analytics?.didNotConnect || 0 }), _jsx("p", { className: "text-sm text-gray-600", children: "Did Not Connect" })] }), _jsx(ExclamationTriangleIcon, { className: "w-8 h-8 text-blue-600" })] }) }), _jsx("div", { className: "bg-white p-4 rounded-lg border border-gray-200", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-2xl font-bold text-gray-900", children: analytics?.answers || 0 }), _jsxs("p", { className: "text-sm text-gray-600", children: ["(", analytics?.answerRate?.toFixed(2) || '0.00', "%) Answers"] })] }), _jsx(PhoneIcon, { className: "w-8 h-8 text-blue-600" })] }) }), _jsx("div", { className: "bg-white p-4 rounded-lg border border-gray-200", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-2xl font-bold text-gray-900", children: analytics?.noAnswer || 0 }), _jsxs("p", { className: "text-sm text-gray-600", children: ["(", analytics?.noAnswerRate?.toFixed(2) || '0.00', "%) No Answer"] })] }), _jsx(PhoneIcon, { className: "w-8 h-8 text-blue-600" })] }) }), _jsx("div", { className: "bg-white p-4 rounded-lg border border-gray-200", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-2xl font-bold text-gray-900", children: analytics?.appointments || 0 }), _jsxs("p", { className: "text-sm text-gray-600", children: ["(", analytics?.appointmentRate?.toFixed(2) || '0.00', "%) Appointments"] })] }), _jsx(CalendarDaysIcon, { className: "w-8 h-8 text-blue-600" })] }) }), _jsx("div", { className: "bg-white p-4 rounded-lg border border-gray-200", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-2xl font-bold text-gray-900", children: analytics?.transfers || 0 }), _jsxs("p", { className: "text-sm text-gray-600", children: ["(", analytics?.transferRate?.toFixed(2) || '0.00', "%) Transfers"] })] }), _jsx(ArrowPathIcon, { className: "w-8 h-8 text-blue-600" })] }) })] })), _jsxs("div", { className: "bg-white p-6 rounded-lg border border-gray-200", children: [_jsxs("div", { className: "flex items-center justify-between mb-4", children: [_jsx("h3", { className: "text-lg font-semibold text-gray-900", children: "Call Outcome" }), _jsxs("div", { className: "flex items-center space-x-4", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx("label", { className: "text-xs font-medium text-gray-700", children: "From" }), _jsxs("div", { className: "relative", children: [_jsx("input", { type: "text", value: callOutcomeFrom, onChange: (e) => setCallOutcomeFrom(e.target.value), className: "w-32 px-3 py-1 pl-8 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm" }), _jsx(CalendarDaysIcon, { className: "absolute left-2 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" })] })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx("label", { className: "text-xs font-medium text-gray-700", children: "To" }), _jsxs("div", { className: "relative", children: [_jsx("input", { type: "text", value: callOutcomeTo, onChange: (e) => setCallOutcomeTo(e.target.value), className: "w-32 px-3 py-1 pl-8 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm" }), _jsx(CalendarDaysIcon, { className: "absolute left-2 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" })] })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx("label", { className: "text-xs font-medium text-gray-700", children: "Day" }), _jsxs("select", { value: callOutcomeDay, onChange: (e) => setCallOutcomeDay(e.target.value), className: "w-24 px-3 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm", children: [_jsx("option", { value: "Day", children: "Day" }), _jsx("option", { value: "Week", children: "Week" }), _jsx("option", { value: "Month", children: "Month" })] })] })] })] }), _jsx("div", { className: "border-2 border-dashed border-gray-300 rounded-lg h-64 flex items-center justify-center", children: _jsxs("div", { className: "text-center text-gray-500", children: [_jsx(ChartBarIcon, { className: "w-12 h-12 mx-auto mb-2 text-gray-400" }), _jsx("p", { className: "text-sm", children: "Chart/Table area for call outcome data" }), analytics && (_jsxs("div", { className: "mt-4 text-xs text-gray-400", children: [_jsxs("p", { children: ["\u00DAltima actualizaci\u00F3n: ", new Date(analytics.lastUpdated).toLocaleString()] }), _jsxs("div", { className: "flex justify-center space-x-4 mt-2", children: [analytics.dataSources?.twilio && (_jsx("span", { className: "px-2 py-1 bg-blue-100 text-blue-800 rounded", children: "Twilio" })), analytics.dataSources?.elevenLabs && (_jsx("span", { className: "px-2 py-1 bg-green-100 text-green-800 rounded", children: "ElevenLabs" })), analytics.dataSources?.goHighLevel && (_jsx("span", { className: "px-2 py-1 bg-purple-100 text-purple-800 rounded", children: "GoHighLevel" })), analytics.dataSources?.local && (_jsx("span", { className: "px-2 py-1 bg-gray-100 text-gray-800 rounded", children: "Local" }))] })] }))] }) })] })] }));
};
export default Analytics;
